from _typeshed import Incomplete
from sage_imap.helpers.email import EmailIterator
from sage_imap.helpers.mailbox import MailboxStatusItems
from sage_imap.helpers.message import MessageParts, MessageSet
from sage_imap.helpers.search import IMAPSearchCriteria
from typing import Any

__all__ = ['IMAPMailboxService']

class IMAPMailboxService:
    client: Incomplete
    mailbox: Incomplete
    def __init__(self, client: IMAPClient) -> None: ...
    def __enter__(self) -> IMAPMailboxService: ...
    def __exit__(self, exc_type: type | None, exc_value: BaseException | None, traceback: Any | None) -> None: ...
    def select_mailbox(self, mailbox: str | None = ...) -> None: ...
    def close_mailbox(self) -> None: ...
    def check(self) -> None: ...
    def search(self, criteria: IMAPSearchCriteria) -> list[str]: ...
    def delete_temporarily(self, msg_set: MessageSet) -> None: ...
    def delete_permanently(self, msg_set: MessageSet) -> None: ...
    def move_to_folder(self, msg_set: MessageSet, folder: str) -> None: ...
    def restore_from_trash(self, msg_set: MessageSet, original_folder: str) -> None: ...
    def fetch(self, msg_set: MessageSet, message_part: MessageParts) -> EmailIterator: ...
    def save_sent_email(self, raw_email: bytes, sent_folder: str = ...) -> None: ...
    def get_mailbox_status(self, *status_items: MailboxStatusItems, mailbox: str = ...) -> str: ...
